substitutions:
  name: <NAME>
  friendly_name: <FRIENDLY NAME>

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
#  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} AP"
    password: !secret wifi_fallback_password

captive_portal:

# Global variables
globals:
  - id: global_laser_pwm_preset
    type: int
    restore_value: no
    initial_value: '1'

  - id: global_laser_pulse_mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: global_nebula_preset
    type: int
    restore_value: no
    initial_value: '1'

# OPTIONAL - for internal temperature measurement!
#
dallas:
  - pin: GPIO18
#

light:
  - platform: rgb
    name: ${name}_nebula
    id: rgb_light
    red: red
    green: green
    blue: blue
    effects:
      - flicker:
          name: Flicker
          alpha: 95%
          intensity: 2.5%
      - random:
          name: Random
          transition_length: 2.5s
          update_interval: 3s
      - random:
          name: Random Slow
          transition_length: 10s
          update_interval: 5s
      - pulse:
      - strobe:


# OPTIONAL - body lights
#
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO19
    num_leds: 16
    name: ${name}_neopixel
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_twinkle:
      - addressable_random_twinkle:
#

  - platform: monochromatic
    name: ${name}_laser
    id: laser
    output: laser_pwm

  - platform: monochromatic
    name: ${name}_sLED_blue"
    id: status_led_blue
    output: led_blue

  - platform: monochromatic
    name: ${name}_sLED_red"
    id: status_led_red
    output: led_red

  - platform: monochromatic
    name: ${name}_sLED_esp32"
    id: status_led_esp32
    output: led_esp32

fan:
  platform: speed
  name: ${name}_motor
  id: motor
  output: motor_pwm
  restore_mode: ALWAYS_OFF

output:
  - platform: ledc
    id: red
    pin: GPIO21

  - platform: ledc
    id: green
    pin: GPIO16

  - platform: ledc
    id: blue
    pin: GPIO17

  - platform: ledc
    id: laser_pwm
    pin: GPIO4
    frequency: 1000 Hz

  - platform: ledc
    id: motor_pwm
    frequency: 1000 Hz
    pin: GPIO22

  - platform: ledc
    id: led_blue
    pin:
      number: GPIO27
      mode: OUTPUT
      inverted: true

  - platform: ledc
    id: led_red
    pin:
      number: GPIO32
      mode: OUTPUT
      inverted: true

  - platform: ledc
    id: led_esp32
    pin:
      number: GPIO2
      mode: OUTPUT
      inverted: false


binary_sensor:
  - platform: status
    name: ${name}_status

  - platform: gpio
    name: ${name}_button_on-off"
    id: button_on_off
    pin:
      number: GPIO23
      mode:
        input: true
      inverted: true

  - platform: gpio
    name: ${name}_button_nebula
    id: button_nebula
    pin:
      number: GPIO34
      mode:
        input: true
      inverted: true
    filters:
      - delayed_on_off: 50ms
    on_release:
      then:
        - script.execute: cycle_nebula_colors

  - platform: gpio
    name: ${name}_button_star
    id: button_star
    pin:
      number: GPIO35
      mode:
        input: true
      inverted: true
    filters:
      - delayed_on_off: 50ms
    on_release:
      then:
        - lambda: |-
            if (id(global_laser_pwm_preset) == 0) {
              id(laser).turn_off();  // Off state
              id(global_laser_pwm_preset) = 1;
            } else if (id(global_laser_pwm_preset) == 1) {
              auto call = id(laser).turn_on();
              call.set_brightness(0.60);  // Level 1
              call.perform();
              id(global_laser_pwm_preset) = 2;
            } else if (id(global_laser_pwm_preset) == 2) {
              auto call = id(laser).turn_on();
              call.set_brightness(0.68);  // Level 2
              call.perform();
              id(global_laser_pwm_preset) = 3;
            } else if (id(global_laser_pwm_preset) == 3) {
              auto call = id(laser).turn_on();
              call.set_brightness(0.68);  // Level 3
              call.perform();
              id(global_laser_pwm_preset) = 4;
            } else if (id(global_laser_pwm_preset) == 4) {
              auto call = id(laser).turn_on();
              call.set_brightness(0.85);  // Level 4
              call.perform();
              id(global_laser_pwm_preset) = 0;
            }

switch:
  - platform: restart
    name: ${name}_restart

  - platform: template
    name: "Laser - Breathing"
    id: sw_pulse_laser
    optimistic: true
    turn_on_action:
      - lambda: 'id(global_laser_pulse_mode) = 1;'
    turn_off_action:
      - lambda: 'id(global_laser_pulse_mode) = 0;'
      - light.turn_off:
          id: laser
          transition_length: 1s
    lambda: |-  # This lambda function reports the state of the switch
      if (id(global_laser_pulse_mode) == 1) {
        return true;  // The switch is ON
      } else {
        return false;  // The switch is OFF
      }

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${name}_wifi_ip
      update_interval: 30min
    ssid:
      name: ${name}_wifi_ssid
      update_interval: 30min

sensor:
  - platform: wifi_signal
    name: ${name}_wifi_signal
    id: wifi_signal_db
    update_interval: 5min
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    name: ${name}_wifi_signal_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: internal_temperature
    name: ${name}_cpu_temp
    update_interval: 10min

# OPTIONAL
# At boot, it will print the address of the connected sensor, copy it to the "address" section and activate (uncomment) the sensor
#
#  - platform: dallas
#    address: 0x0
#    name: ${name}_int_temp

remote_receiver:
  pin:
    number: GPIO33
    inverted: true
    mode:
        input: true
  dump: nec
  on_nec:
    then:
    - if:
        condition:
          and:
            - lambda: 'return (x.address == 0xFF00);'
            - lambda: 'return (x.command == 0xBB44);'
        then:
          - script.execute: cycle_nebula_colors
    - if:
        condition:
          and:
            - lambda: 'return (x.address == 0xFF00);'
            - lambda: 'return (x.command == 0x00FF);'
        then:
          - script.execute: cycle_laser_presets

script:
  - id: cycle_nebula_colors
    then:
      - lambda: |-
          if (id(global_nebula_preset) == 0) {
            auto call = id(rgb_light).turn_off();
            call.perform();
            id(global_nebula_preset) = 1;
          } else if (id(global_nebula_preset) == 1) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(1.0);
            call.set_green(0.0);
            call.set_blue(0.0);
            call.perform();
            id(global_nebula_preset) = 2;
          } else if (id(global_nebula_preset) == 2) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(0.0);
            call.set_green(1.0);
            call.set_blue(0.0);
            call.perform();
            id(global_nebula_preset) = 3;
          } else if (id(global_nebula_preset) == 3) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(0.0);
            call.set_green(0.0);
            call.set_blue(1.0);
            call.perform();
            id(global_nebula_preset) = 4;
          } else if (id(global_nebula_preset) == 4) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(1.0);
            call.set_green(0.0);
            call.set_blue(1.0);
            call.perform();
            id(global_nebula_preset) = 5;
          } else if (id(global_nebula_preset) == 5) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(1.0);
            call.set_green(1.0);
            call.set_blue(0.0);
            call.perform();
            id(global_nebula_preset) = 6;
          } else if (id(global_nebula_preset) == 6) {
            auto call = id(rgb_light).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.set_red(0.0);
            call.set_blue(1.0);
            call.set_green(1.0);
            call.perform();
            id(global_nebula_preset) = 0;
          }

  - id: cycle_laser_presets
    then:
      - lambda: |-
          if (id(global_laser_pwm_preset) == 0) {
            auto call = id(laser).turn_off();
            call.perform();
            id(global_laser_pwm_preset) = 1;
          } else if (id(global_laser_pwm_preset) == 1) {
            auto call = id(laser).turn_on();
            call.set_brightness(0.60);  // Level 1
            call.perform();
            id(global_laser_pwm_preset) = 2;
          } else if (id(global_laser_pwm_preset) == 2) {
            auto call = id(laser).turn_on();
            call.set_brightness(0.68);  // Level 2
            call.perform();
            id(global_laser_pwm_preset) = 3;
          } else if (id(global_laser_pwm_preset) == 3) {
            auto call = id(laser).turn_on();
            call.set_brightness(0.68);  // Level 3
            call.perform();
            id(global_laser_pwm_preset) = 4;
          } else if (id(global_laser_pwm_preset) == 4) {
            auto call = id(laser).turn_on();
            call.set_brightness(0.85);  // Level 4
            call.perform();
            id(global_laser_pwm_preset) = 0;
          }

interval:
  - interval: 10s
    then:
      - if:
          condition:
            lambda: 'return id(global_laser_pulse_mode) == 1;'
          then:
            - if:
                condition:
                  light.is_on: laser
                then:
                  - light.turn_off:
                      id: laser
                      transition_length: 5s
                else:
                  - light.turn_on:
                      id: laser
                      brightness: 70%
                      transition_length: 5s
